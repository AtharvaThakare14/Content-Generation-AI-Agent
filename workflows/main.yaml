name: workflow   # one file can contain several jobs

on:
  push:
    branches: [dev]          # preview deploys
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
# ────────────────────────────────────────
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3      # your existing lint & test steps
      - run: echo "Linting repository"
      - run: echo "Running unit tests"

# ────────────────────────────────────────
  deploy-to-vercel:            # Preview deployment
    name: Deploy to Vercel (preview)
    needs: integration
    runs-on: ubuntu-latest

    # Link the org & project only once here; picked up by every step
    env:
      VERCEL_ORG_ID:     ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN:      ${{ secrets.VERCEL_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull env & link info
        run: vercel pull --yes --environment=preview --token "$VERCEL_TOKEN"

      - name: Build project artefacts
        run: vercel build --token "$VERCEL_TOKEN"

      - name: Deploy pre-built artefacts
        run: vercel deploy --prebuilt --token "$VERCEL_TOKEN"



# name: workflow

# on:
#   push:
#     branches:
#       - dev
#     paths-ignore:
#       - 'README.md'

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   integration:
#     name: Continuous Integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Lint code
#         run: echo "Linting repository"

#       - name: Run unit tests
#         run: echo "Running unit tests"

#   build-and-push-ecr-image:
#     name: Continuous Delivery
#     needs: integration
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Install Utilities
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y jq unzip
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
#           IMAGE_TAG: latest
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
          
#   # Continuous-Deployment:
#   #   needs: build-and-push-ecr-image
#   #   runs-on: self-hosted
#   #   steps:
#   #     - name: Checkout
#   #       uses: actions/checkout@v3

#   #     - name: Configure AWS credentials
#   #       uses: aws-actions/configure-aws-credentials@v1
#   #       with:
#   #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #         aws-region: ${{ secrets.AWS_REGION }}

#   #     - name: Login to Amazon ECR
#   #       id: login-ecr
#   #       uses: aws-actions/amazon-ecr-login@v1
      
      
#   #     - name: Pull latest images
#   #       run: |
#   #        docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
#   #     # - name: Stop and remove  container if running
#   #     #   run: |
#   #     #    docker ps -q --filter "name=course-api-service" | grep -q . && docker stop course-api-service && docker rm -fv course-api-service
       
#   #     - name: Run Docker Image to serve users
#   #       run: |
#   #        docker run -d -p 8000:8000 --ipc="host" --name=course-api-service -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
#   #     - name: Clean previous images and containers
#   #       run: |
#   #        docker system prune -f